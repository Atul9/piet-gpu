// This is "kernel 4" in a 4-kernel pipeline. It renders the commands
// in the per-tile command list to an image.

// Right now, this kernel stores the image in a buffer, but a better
// plan is to use a texture. This is because of limited support.

#version 450
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable

#define CHUNK 8
#define CHUNK_DY (16 / CHUNK)
layout(local_size_x = 16, local_size_y = 2) in;

// Same concern that this should be readonly as in kernel 3.
layout(set = 0, binding = 0) buffer PtclBuf {
    uint[] ptcl;
};

// Used readonly
layout(set = 0, binding = 1) buffer SegmentBuf {
    uint[] segment;
};

layout(set = 0, binding = 2) buffer ImageBuf {
    uint[] image;
};

#include "ptcl.h"
#include "segment.h"

#include "setup.h"

void main() {
    uint tile_ix = gl_WorkGroupID.y * WIDTH_IN_TILES + gl_WorkGroupID.x;
    CmdRef cmd_ref = CmdRef(tile_ix * PTCL_INITIAL_ALLOC);

    uvec2 xy_uint = uvec2(gl_GlobalInvocationID.x, gl_LocalInvocationID.y + TILE_HEIGHT_PX * gl_WorkGroupID.y);
    vec2 xy = vec2(xy_uint);
    vec2 uv = xy * vec2(1.0 / IMAGE_WIDTH, 1.0 / IMAGE_HEIGHT);
    //vec3 rgb = uv.xyy;
    vec3 rgb[CHUNK];
    for (uint i = 0; i < CHUNK; i++) {
        rgb[i] = vec3(0.5);
    }

    while (true) {
        uint tag = Cmd_tag(cmd_ref);
        if (tag == Cmd_End) {
            break;
        }
        switch (tag) {
        case Cmd_Circle:
            CmdCircle circle = Cmd_Circle_read(cmd_ref);
            vec4 fg_rgba = unpackUnorm4x8(circle.rgba_color).wzyx;
            for (uint i = 0; i < CHUNK; i++) {
                float dy = float(i * CHUNK_DY);
                float r = length(vec2(xy.x, xy.y + dy) + vec2(0.5, 0.5) - circle.center.xy);
                float alpha = clamp(0.5 + circle.radius - r, 0.0, 1.0);
                // TODO: sRGB
                rgb[i] = mix(rgb[i], fg_rgba.rgb, alpha * fg_rgba.a);
            }
            break;
        case Cmd_Stroke:
            CmdStroke stroke = Cmd_Stroke_read(cmd_ref);
            float df[CHUNK];
            for (uint k = 0; k < CHUNK; k++) df[k] = 1e9;
            for (int i = 0; i < stroke.n_segs; i++) {
                Segment seg = Segment_read(Segment_index(SegmentRef(stroke.seg_ref), i));
                vec2 line_vec = seg.end - seg.start;
                for (uint k = 0; k < CHUNK; k++) {
                    vec2 dpos = xy + vec2(0.5, 0.5) - seg.start;
                    dpos.y += float(k * CHUNK_DY);
                    float t = clamp(dot(line_vec, dpos) / dot(line_vec, line_vec), 0.0, 1.0);
                    df[k] = min(df[k], length(line_vec * t - dpos));
                }
            }
            fg_rgba = unpackUnorm4x8(stroke.rgba_color).wzyx;
            for (uint k = 0; k < CHUNK; k++) {
                float alpha = clamp(stroke.half_width + 0.5 - df[k], 0.0, 1.0);
                rgb[k] = mix(rgb[k], fg_rgba.rgb, alpha * fg_rgba.a);
            }
            break;
        case Cmd_Jump:
            cmd_ref = CmdRef(Cmd_Jump_read(cmd_ref).new_ref);
            continue;
        }
        cmd_ref.offset += Cmd_size;
    }

    // TODO: sRGB
    for (uint i = 0; i < CHUNK; i++) {
        uvec4 s = uvec4(round(vec4(rgb[i], 1.0) * 255.0));
        uint rgba_packed = s.r | (s.g << 8) | (s.b << 16) | (s.a << 24);
        image[(xy_uint.y + CHUNK_DY * i) * IMAGE_WIDTH + xy_uint.x] = rgba_packed;
    }
}
